@startuml
class ru.timur.Controllers.FileLoader {
+ <<Create>> FileLoader()
+ File loadFile(String,String,String,String)
}
class ru.timur.Main {
- {static} CollectionController collectionController
- {static} WorkerReader workerReader
- {static} CommandsController commandsController
- {static} DataFileController dataFileController
+ {static} void main(String[])
+ {static} void scriptMode()
+ {static} void interactiveMode()
- {static} String readFileName()
- {static} PriorityQueue<Worker> loadData()
}
enum ru.timur.Collection.Status {
+  FIRED
+  HIRED
+  REGULAR
+  PROBATION
}
class ru.timur.Collection.Worker {
- long id
- String name
- Coordinates coordinates
- java.time.ZonedDateTime creationDate
- Integer salary
- java.time.LocalDateTime startDate
- java.time.LocalDateTime endDate
- Status status
- Person person
+ <<Create>> Worker(long,String,Coordinates,ZonedDateTime,Integer,LocalDateTime,LocalDateTime,Status,Person)
+ long getId()
+ void setId(long)
+ Integer getSalary()
+ LocalDateTime getEndDate()
+ String getName()
+ Coordinates getCoordinates()
+ ZonedDateTime getCreationDate()
+ LocalDateTime getStartDate()
+ Status getStatus()
+ Person getPerson()
+ int compareTo(Worker)
+ String toString()
}
abstract class ru.timur.Commands.UserCommand {
- String name
- String arguments
- String description
+ <<Create>> UserCommand(String,String)
+ <<Create>> UserCommand(String,String,String)
+ String getName()
+ {abstract}void initCommandArgs(String[])
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}
class ru.timur.Exceptions.InvalidDataException {
+ <<Create>> InvalidDataException(String)
}
interface ru.timur.Commands.ICommand {
~ String getName()
~ void execute()
}
class ru.timur.Collection.Person {
- Long height
- Color eyeColor
- Country nationality
+ <<Create>> Person(Long,Color,Country)
+ String toString()
+ Long getHeight()
+ Color getEyeColor()
+ Country getNationality()
}
class ru.timur.Commands.ExecuteScriptCommand {
- String scriptFilePath
+ <<Create>> ExecuteScriptCommand()
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Controllers.CommandsController {
- ArrayList<ICommand> commandsList
+ <<Create>> CommandsController(CollectionController,WorkerReader,DataFileController)
+ ArrayList<ICommand> getCommandsList()
+ UserCommand launchCommand(String,String[])
}
class ru.timur.Commands.RemoveGreaterCommand {
- WorkerReader workerReader
- CollectionController collectionController
+ <<Create>> RemoveGreaterCommand(WorkerReader,CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.UI.Console {
- {static} Console CONSOLE
- Scanner scanner
- <<Create>> Console()
+ {static} Console getInstance()
+ void setScanner(Scanner)
+ Scanner getScanner()
+ String readLine()
+ boolean hasNextLine()
+ void print(Object)
+ void printLn(Object)
+ void printError(String)
}
class ru.timur.Controllers.CollectionController {
- PriorityQueue<Worker> collection
- LocalDateTime creationDate
- boolean changeFlag
+ <<Create>> CollectionController(PriorityQueue<Worker>)
+ {static} boolean isValid(PriorityQueue<Worker>)
+ boolean wasChanged()
+ void removeChangeFlag()
+ long generateId()
+ PriorityQueue<Worker> getCollection()
+ LocalDateTime getCreationDate()
+ boolean containsId(long)
+ String getInfo()
+ void add(Worker)
+ void update(long,Worker)
+ void removeById(long)
+ void clear()
+ void removeFirst()
+ int removeGreater(Worker)
+ int removeLower(Worker)
+ Worker getMinBySalary()
+ List<Worker> getLessThanEndDate(LocalDateTime)
+ List<Integer> getDescendingSalaries()
}
class ru.timur.JSON.LocalDateTimeSerializer {
+ JsonElement serialize(LocalDateTime,Type,JsonSerializationContext)
}
interface ru.timur.Validators.Validator {
~ void validate(T)
}
class ru.timur.Commands.ShowCommand {
- CollectionController collectionController
+ <<Create>> ShowCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.InfoCommand {
- CollectionController collectionController
+ <<Create>> InfoCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.JSON.ZonedDateTimeSerializer {
+ JsonElement serialize(ZonedDateTime,Type,JsonSerializationContext)
}
class ru.timur.UI.YesNoQuestionAsker {
~ String question
+ <<Create>> YesNoQuestionAsker(String)
+ boolean ask()
}
enum ru.timur.Collection.Country {
+  UNITED_KINGDOM
+  USA
+  VATICAN
}
class ru.timur.Exceptions.WrongAmountOfArgumentsException {
- int expectedArguments
- int givenArguments
~ String message
+ <<Create>> WrongAmountOfArgumentsException(String,int,int)
+ String getMessage()
}
class ru.timur.JSON.ZonedDateTimeDeserializer {
+ ZonedDateTime deserialize(JsonElement,Type,JsonDeserializationContext)
}
class ru.timur.Commands.RemoveLowerCommand {
- WorkerReader workerReader
- CollectionController collectionController
+ <<Create>> RemoveLowerCommand(WorkerReader,CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.FilterLessThanEndDateCommand {
- WorkerReader workerReader
- CollectionController collectionController
+ <<Create>> FilterLessThanEndDateCommand(WorkerReader,CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Controllers.DataFileController {
- File dataFile
- Gson gson
+ <<Create>> DataFileController(File)
+ void writeToJSON(PriorityQueue<Worker>)
+ PriorityQueue<Worker> readJSON()
}
class ru.timur.Commands.HelpCommand {
- CommandsController commandsController
+ <<Create>> HelpCommand(CommandsController)
+ void execute()
+ void initCommandArgs(String[])
}
enum ru.timur.Collection.Color {
+  RED
+  BLUE
+  YELLOW
+  BROWN
}
class ru.timur.Constants {
+ {static} boolean SCRIPT_MODE
+ {static} String DATE_FORMAT_STRING
+ {static} String TIME_FROMAT_STRING
+ {static} DateTimeFormatter formatter
+ {static} Stack<String> scriptStack
}
class ru.timur.Validators.WorkerValidators {
+ {static} Validator<Worker> workerValidator
+ {static} Validator<Long> idValidator
+ {static} Validator<String> nameValidator
+ {static} Validator<Coordinates> coordinatesValidator
+ {static} Validator<Double> xValidator
+ {static} Validator<Double> yValidator
+ {static} Validator<LocalDateTime> startDateValidator
+ {static} Validator<LocalDateTime> endDateValidator
+ {static} Validator<ZonedDateTime> creationDateValidator
+ {static} Validator<Integer> salaryValidator
+ {static} Validator<Status> statusValidator
+ {static} Validator<Person> personValidator
+ {static} Validator<Long> heightValidator
+ {static} Validator<Color> eyeColorValidator
+ {static} Validator<Country> nationalityValidator
}
interface ru.timur.Parsers.Parser {
~ T parse(String)
}
class ru.timur.Commands.UpdateByIdCommand {
- WorkerReader workerReader
- CollectionController collectionController
- long id
+ <<Create>> UpdateByIdCommand(WorkerReader,CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.AddCommand {
- CollectionController collectionController
- WorkerReader workerReader
+ <<Create>> AddCommand(WorkerReader,CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.ExitCommand {
- CollectionController collectionController
+ <<Create>> ExitCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
abstract class ru.timur.Collection.Readers.ValueReader {
+ T readValue(String,Validator<T>,Parser<T>)
}
class ru.timur.Collection.Readers.WorkerReader {
- CollectionController collectionController
+ <<Create>> WorkerReader(CollectionController)
+ Worker readWorker()
+ String readName()
+ Coordinates readCoordinates()
+ double readX()
+ double readY()
+ Integer readSalary()
+ LocalDateTime readStartDate()
+ LocalDateTime readEndDate()
+ Status readStatus()
+ Person readPerson()
+ long readHeight()
+ Color readEyeColor()
+ Country readNationality()
}
class ru.timur.Commands.PrintFieldDescendingSalaryCommand {
- CollectionController collectionController
+ <<Create>> PrintFieldDescendingSalaryCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.MinBySalaryCommand {
- CollectionController collectionController
+ <<Create>> MinBySalaryCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Exceptions.RecursiveScriptException {
+ <<Create>> RecursiveScriptException(String)
}
class ru.timur.Collection.Coordinates {
- double x
- double y
+ <<Create>> Coordinates(double,double)
+ String toString()
+ double getX()
+ double getY()
+ int compareTo(Coordinates)
}
class ru.timur.Commands.SaveCommand {
- CollectionController collectionController
- DataFileController dataFileController
+ <<Create>> SaveCommand(CollectionController,DataFileController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Commands.ClearCommand {
- CollectionController collectionController
+ <<Create>> ClearCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Exceptions.WrongFilePermissionsException {
+ <<Create>> WrongFilePermissionsException(String)
}
class ru.timur.Commands.RemoveByIdCommand {
- CollectionController collectionController
- long id
+ <<Create>> RemoveByIdCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}
class ru.timur.Parsers.WorkerParsers {
+ {static} Parser<String> stringParser
+ {static} Parser<Long> longParser
+ {static} Parser<Integer> integerParser
+ {static} Parser<Double> doubleParser
+ {static} Parser<LocalDateTime> localDateTimeParser
+ {static} Parser<Status> statusParser
+ {static} Parser<Color> eyeColorParser
+ {static} Parser<Country> nationalityParser
}
class ru.timur.Commands.RemoveFirstCommand {
- CollectionController collectionController
+ <<Create>> RemoveFirstCommand(CollectionController)
+ void execute()
+ void initCommandArgs(String[])
}


ru.timur.JSON.JsonDeserializer <|.. ru.timur.JSON.LocalDateTimeDeserializer
ru.timur.Collection.Comparable <|.. ru.timur.Collection.Worker
ru.timur.Commands.ICommand <|.. ru.timur.Commands.UserCommand
ru.timur.Exceptions.Exception <|-- ru.timur.Exceptions.InvalidDataException
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.ExecuteScriptCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.RemoveGreaterCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.ShowCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.InfoCommand
ru.timur.Exceptions.IllegalArgumentException <|-- ru.timur.Exceptions.WrongAmountOfArgumentsException
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.RemoveLowerCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.FilterLessThanEndDateCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.HelpCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.UpdateByIdCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.AddCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.ExitCommand
ru.timur.Collection.Readers.ValueReader <|-- ru.timur.Collection.Readers.WorkerReader
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.PrintFieldDescendingSalaryCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.MinBySalaryCommand
ru.timur.Exceptions.Exception <|-- ru.timur.Exceptions.RecursiveScriptException
ru.timur.Collection.Comparable <|.. ru.timur.Collection.Coordinates
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.SaveCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.ClearCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.RemoveByIdCommand
ru.timur.Commands.UserCommand <|-- ru.timur.Commands.RemoveFirstCommand
@enduml